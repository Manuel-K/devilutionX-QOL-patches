Moster hp bar.

Modifications by Manuel-K:
- cleanup and refactoring
- hide elemental damage info if less than 15 kills (optional)
- hide exact hp if less than 30 kills (optional)

Self censoring can be disabled by setting cheat to true.

Based on Infernity by quendel, extracted by sergi4ua.

diff --git a/Source/scrollrt.cpp b/Source/scrollrt.cpp
index 7df9f370..54d29e69 100644
--- a/Source/scrollrt.cpp
+++ b/Source/scrollrt.cpp
@@ -1,5 +1,7 @@
 #include "diablo.h"
 
+#include <sstream>
+
 DEVILUTION_BEGIN_NAMESPACE
 
 int light_table_index;
@@ -872,6 +874,133 @@ static void DrawGame(int x, int y)
 	}
 }
 
+void DrawMonsterHealthBar(int monsterID)
+{
+	static const int yPos = 180;
+	static const int width = 250;
+	static const int ScreenWidth = 640;
+	static const int Screen_LeftBorder = 64;
+	static const int xPos = (ScreenWidth) / 2 - Screen_LeftBorder;
+	static const int height = 25;
+	static const int xOffset = 0;
+	static const int yOffset = 0; // was 1
+	static const int borderWidth = 2;
+	static const int borderColors[] = { 242/*undead*/,232/*demon*/,182/*beast*/ };
+	static const int filledColor = 142; // optimum balance in bright red between dark and light
+	static const bool fillCorners = true;
+	static const int square = 10;
+	static const char* immuText = "IMMU: ";
+	static const char* resText = "RES: ";
+	static const char* vulnText = ":VULN";
+	static const int resSize = 3;
+	static const int resistColors[] = { 148, 140, 129 };
+	static const unsigned short immunes[] = { 0x8, 0x10, 0x20 };
+	static const unsigned short resists[] = { 0x1, 0x2, 0x4 };
+	static const bool cheat = false;
+
+	if (!monster[monsterID].MData) {
+		return;
+	}
+
+	MonsterStruct* mon = &monster[monsterID];
+	BOOL specialMonster = !!mon->_uniqtype;
+	int currentLife = mon->_mhitpoints;
+	int maxLife = mon->_mmaxhp;
+	if (currentLife > maxLife) {
+		maxLife = currentLife;
+	}
+	int borderColor =  borderColors[mon->MData->mMonstClass];
+	float FilledPercent = (float)currentLife / (float)maxLife;
+	unsigned short mres = mon->mMagicRes;
+	bool showHPNumbers = cheat || monstkills[mon->MType->mtype] >= 30;
+	bool showDamageModifiers = cheat || monstkills[mon->MType->mtype] >= 15;
+
+	if (showDamageModifiers) {
+		int resOffset = 0 + CalculateTextWidth(resText);
+		for (int k = 0; k < resSize; ++k) {
+			if (!(mres & resists[k])) {
+				continue;
+			}
+			DrawSolidRectangle(xPos + resOffset, square, yPos + height + yOffset + borderWidth + 2, square, resistColors[k]);
+			resOffset += 12;
+		}
+
+		int vulOffset = width - square - CalculateTextWidth(vulnText) - 4;
+		for (int k = 0; k < resSize; ++k) {
+			if (mres & resists[k] || mres & immunes[k]) {
+				continue;
+			}
+			DrawSolidRectangle(xPos + vulOffset, square, yPos + height + yOffset + borderWidth + 2, square, resistColors[k]);
+			vulOffset -= 12;
+		}
+	}
+
+	DrawSolidRectangle(xPos, (int) ceil(FilledPercent * width), yPos, height, filledColor);
+
+	static const int cornerMod = fillCorners ? borderWidth : 0;
+	static const int x0 = xPos - xOffset;
+	static const int dx = width + 2*xOffset + cornerMod;
+	static const int y0 = yPos - yOffset;
+	static const int dy = height + 2*yOffset + cornerMod;
+	DrawSolidRectangle(x0 - cornerMod, dx, yPos - yOffset - borderWidth, borderWidth, borderColor);
+	DrawSolidRectangle(x0            , dx, yPos + yOffset + height,      borderWidth, borderColor);
+	DrawSolidRectangle(xPos - xOffset - borderWidth, borderWidth, y0,             dy, borderColor);
+	DrawSolidRectangle(xPos + xOffset + width,       borderWidth, y0 - cornerMod, dy, borderColor);
+
+	bool drawImmu = false;
+	if (showDamageModifiers) {
+		int immuOffset = 0 + CalculateTextWidth(immuText) - 5;
+		for (int k = 0; k < resSize; ++k) {
+			if (!(mres & immunes[k])) {
+				continue;
+			}
+			drawImmu = true;
+			DrawSolidRectangle(xPos + immuOffset, square, yPos + height + yOffset + borderWidth + 2 - 15, square, resistColors[k]);
+			immuOffset += 12;
+		}
+	}
+
+	static const int newX = xPos + Screen_LeftBorder;
+	static const int newY = yPos + height - 3;
+	std::stringstream name;
+	name << mon->mName;
+	if (mon->leader > 0) {
+		name << " (minion)";
+	}
+	int namecolor = COL_WHITE;
+	if (specialMonster) { // || name.str() == "The Dark Lord"
+		namecolor = COL_GOLD;
+	}
+
+	if (!showHPNumbers) {
+		PrintGameStr(newX - CalculateTextWidth((char*)name.str().c_str()) / 2, 37, (char*)name.str().c_str(), namecolor);
+	} else {
+		static const int TWSlash = CalculateTextWidth("/");
+		PrintGameStr(newX - CalculateTextWidth((char*)name.str().c_str()) / 2, 30, (char*)name.str().c_str(), namecolor);
+		PrintGameStr(newX - TWSlash / 2, 43, "/", COL_WHITE);
+		std::stringstream current;
+		current << (currentLife >> 6);
+		std::stringstream max;
+		max << (maxLife >> 6);
+		PrintGameStr(newX + TWSlash, 43, (char*)max.str().c_str(), COL_WHITE);
+		PrintGameStr(newX - CalculateTextWidth((char*)current.str().c_str()) - TWSlash, 43, (char*)current.str().c_str(), COL_WHITE);
+	}
+	if (showDamageModifiers) {
+		PrintGameStr(newX - width / 2, 59, resText, COL_GOLD);
+	}
+
+	std::stringstream kills;
+	kills << "Kills: " << monstkills[mon->MType->mtype];
+	PrintGameStr(newX - CalculateTextWidth("kills")/2-30, 59, (char*)(kills.str().c_str()), COL_WHITE);
+
+	if (drawImmu) {
+		PrintGameStr(newX - width / 2, 46-2, immuText, COL_GOLD);
+	}
+	if (showDamageModifiers) {
+		PrintGameStr(newX + width / 2 - CalculateTextWidth(vulnText), 59, vulnText, COL_RED);
+	}
+}
+
 /**
  * @brief Start rendering of screen, town variation
  * @param StartX Center of view in dPiece coordinate
@@ -926,6 +1055,9 @@ void DrawView(int StartX, int StartY)
 		gmenu_draw_pause();
 	}
 
+	if (pcursmonst != -1) {
+		DrawMonsterHealthBar(pcursmonst);
+	}
 	DrawPlrMsg();
 	gmenu_draw();
 	doom_draw();
