Item highlighting.

Modifications by Manuel-K:
- cleanup and refactoring
- de-hardcode positions
- update label hiding to accommodate widescreen changes

From Infernity by qndel, extracted by sergi4ua.

diff --git a/Source/diablo.cpp b/Source/diablo.cpp
index 6d53647b..6a163244 100644
--- a/Source/diablo.cpp
+++ b/Source/diablo.cpp
@@ -23,6 +23,7 @@ BOOL gbGameLoopStartup;
 BOOL gbRunGame;
 BOOL gbRunGameResult;
 BOOL zoomflag;
+bool drawitems;
 BOOL gbProcessPlayers;
 BOOL gbLoadGame;
 int DebugMonsters[10];
@@ -875,6 +876,9 @@ void ReleaseKey(int vkey)
 {
 	if (vkey == DVL_VK_SNAPSHOT)
 		CaptureScreen();
+
+	if (vkey == DVL_VK_MENU || vkey == DVL_VK_LMENU || vkey == DVL_VK_RMENU)
+		drawitems = false;
 }
 
 void PressKey(int vkey)
@@ -1053,6 +1057,8 @@ void PressKey(int vkey)
 		if (stextflag) {
 			STextNext();
 		}
+	} else if(vkey == DVL_VK_MENU || vkey == DVL_VK_LMENU || vkey == DVL_VK_RMENU) {
+		drawitems = true;
 	} else if (vkey == DVL_VK_LEFT) {
 		if (automapflag && !talkflag) {
 			AutomapLeft();
diff --git a/Source/diablo.h b/Source/diablo.h
index 6fbde94b..60c74171 100644
--- a/Source/diablo.h
+++ b/Source/diablo.h
@@ -25,6 +25,7 @@ extern BOOL gbGameLoopStartup;
 extern BOOL gbRunGame;
 extern BOOL gbRunGameResult;
 extern BOOL zoomflag;
+extern bool drawitems;
 extern BOOL gbProcessPlayers;
 extern BOOL gbLoadGame;
 extern HINSTANCE ghInst;
diff --git a/Source/scrollrt.cpp b/Source/scrollrt.cpp
index b8fa4626..11527741 100644
--- a/Source/scrollrt.cpp
+++ b/Source/scrollrt.cpp
@@ -5,6 +5,10 @@
  */
 #include "all.h"
 
+#include <string>
+#include <vector>
+#include <map>
+
 DEVILUTION_BEGIN_NAMESPACE
 
 /**
@@ -603,6 +607,138 @@ static void DrawItem(int x, int y, int sx, int sy, BOOL pre)
 	CelClippedDrawLight(px, sy, pItem->_iAnimData, pItem->_iAnimFrame, pItem->_iAnimWidth);
 }
 
+void HighlightItemsNameOnMap()
+{
+	// items on ground name highlighting (Qndel)
+	class itemLabel
+	{
+	public:
+		int itemID;
+		int x;
+		int y;
+		int width;
+		int height;
+		int magicLevel;
+		std::string text;
+		itemLabel(int x, int y, int width, int height, int itemID, int q2, std::string text):
+			itemID(itemID), x(x), y(y), width(width), height(height), magicLevel(q2), text(text) {}
+	};
+
+	char textOnGround[256];
+	std::vector<itemLabel> q;
+
+	for (int i = 0; i < numitems; i++) {
+		ItemStruct& item_local = item[itemactive[i]];
+		if (item_local._itype == ITYPE_GOLD) {
+			sprintf(textOnGround, "%i gold", item_local._ivalue);
+		}
+		else {
+			sprintf(textOnGround, "%s", item_local._iIdentified ? item_local._iIName : item_local._iName);
+		}
+
+
+		int walkStandX = ScrollInfo._sxoff;// +plr[myplr]._pyoff;
+		int walkStandY = ScrollInfo._syoff;// +plr[myplr]._pxoff;
+		if (plr[myplr]._pmode == PM_WALK2 && ScrollInfo._sdir == 4) {
+			walkStandX += 32;
+			walkStandY += 16;
+		} else if (plr[myplr]._pmode == PM_WALK2 && ScrollInfo._sdir == 5) {
+			walkStandY += 32;
+		}
+
+		else if(plr[myplr]._pmode == PM_WALK2 && ScrollInfo._sdir == 6) {
+			walkStandX += -32;
+			walkStandY += 16;
+		}
+
+		int row = item_local._ix - plr[myplr]._px;
+		int col = item_local._iy - plr[myplr]._py;
+		int x = (row - col) * TILE_WIDTH  / 2 + (200 * (walkStandX) / 100 >> 1);
+		int y = (row + col) * TILE_HEIGHT / 2 + (200 * (walkStandY) / 100 >> 1);
+
+
+		// add to drawing queue
+		const int labelWidth = CalculateTextWidth(textOnGround);
+		const int &id = itemactive[i];
+		const int &mag = item_local._iMagical;
+		const std::string &text = std::string(textOnGround);
+		q.push_back(itemLabel(x - labelWidth / 2, y, labelWidth, 13, id, mag, text));
+	}
+
+	const int borderX = 5;
+	for (unsigned int item1 = 0; item1 < q.size(); ++item1) {
+		std::map<int, bool> backtrace;
+		bool canShow = FALSE;
+		while (!canShow) {
+			canShow = TRUE;
+			for (unsigned int item2 = 0; item2 < item1; ++item2) {
+				if (abs(q[item2].y - q[item1].y) >= q[item1].height + 2) {
+					continue;
+				}
+				if (q[item2].x >= q[item1].x && q[item2].x - q[item1].x < q[item1].width + borderX) {
+					canShow = FALSE;
+					int newpos = q[item2].x - q[item1].width - borderX;
+					if (backtrace.find(newpos) == backtrace.end()) {
+						q[item1].x = newpos;
+						backtrace[newpos] = TRUE;
+					} else {
+						newpos = q[item2].x + q[item2].width + borderX;
+						q[item1].x = newpos;
+						backtrace[newpos] = TRUE;
+					}
+				} else if (q[item2].x < q[item1].x && q[item1].x - q[item2].x < q[item2].width + borderX) {
+					canShow = FALSE;
+					int newpos = q[item2].x + q[item2].width + borderX;
+					if (backtrace.find(newpos) == backtrace.end()) {
+						q[item1].x = newpos;
+						backtrace[newpos] = TRUE;
+					} else {
+						newpos = q[item2].x - q[item1].width - borderX;
+						q[item1].x = newpos;
+						backtrace[newpos] = TRUE;
+					}
+				}
+			}
+		}
+	}
+
+	for (unsigned int i = 0; i < q.size(); ++i) {
+		itemLabel &t = q[i];
+
+		int sx = t.x + (SCREEN_WIDTH) / 2;
+		int sy = t.y + (PANEL_TOP) / 2  - 16;
+
+
+		if (sx < 0 || sx > SCREEN_WIDTH || sy < 0 || sy > SCREEN_HEIGHT) {
+			continue;
+		}
+
+		if ((chrflag || questlog) && sx < SPANEL_WIDTH && sy < SPANEL_HEIGHT) {
+			continue;
+		}
+
+		if ((invflag || sbookflag) && sx + t.width > SCREEN_WIDTH - SPANEL_WIDTH  && sy < SPANEL_HEIGHT) {
+			continue;
+		}
+
+		int bgcolor = 0;
+		// highlight label if item is under cursor:
+		if (pcursitem == t.itemID) {
+			bgcolor = 134;
+		}
+
+		char color = COL_WHITE;
+		if (t.magicLevel == ITEM_QUALITY_MAGIC) {
+			color = COL_BLUE;
+		} else if (t.magicLevel == ITEM_QUALITY_UNIQUE) {
+			color = COL_GOLD;
+		}
+
+		DrawTransparentRectangle(sx - 1, t.width + 2, sy - t.height + 1, t.height, bgcolor);
+		PrintGameStr(sx, sy, (char*)(t.text.c_str()), color);
+	}
+}
+
 /**
  * @brief Check if and how a mosnter should be rendered
  * @param y dPiece coordinate
@@ -1177,6 +1313,10 @@ void DrawView(int StartX, int StartY)
 
 	DrawDurIcon();
 
+	if (drawitems) {
+		HighlightItemsNameOnMap();
+	}
+
 	if (chrflag) {
 		DrawChr();
 	} else if (questlog) {
